[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "loadEnv",
        "importPath": "src.utils.loadEnv",
        "description": "src.utils.loadEnv",
        "isExtraImport": true,
        "detail": "src.utils.loadEnv",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "src.configs.databse",
        "description": "src.configs.databse",
        "isExtraImport": true,
        "detail": "src.configs.databse",
        "documentation": {}
    },
    {
        "label": "engine",
        "importPath": "src.configs.databse",
        "description": "src.configs.databse",
        "isExtraImport": true,
        "detail": "src.configs.databse",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "src.configs.databse",
        "description": "src.configs.databse",
        "isExtraImport": true,
        "detail": "src.configs.databse",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "BaseModels",
        "importPath": "src.models.baseModels",
        "description": "src.models.baseModels",
        "isExtraImport": true,
        "detail": "src.models.baseModels",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "find_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "db_connect",
        "importPath": "src.configs.db_connect",
        "description": "src.configs.db_connect",
        "isExtraImport": true,
        "detail": "src.configs.db_connect",
        "documentation": {}
    },
    {
        "label": "todoRoutes",
        "importPath": "src.routes",
        "description": "src.routes",
        "isExtraImport": true,
        "detail": "src.routes",
        "documentation": {}
    },
    {
        "label": "get_db",
        "kind": 2,
        "importPath": "src.configs.databse",
        "description": "src.configs.databse",
        "peekOfCode": "def get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()",
        "detail": "src.configs.databse",
        "documentation": {}
    },
    {
        "label": "DATABSE_URL",
        "kind": 5,
        "importPath": "src.configs.databse",
        "description": "src.configs.databse",
        "peekOfCode": "DATABSE_URL = os.environ.get(\"DATABSE_URL\")\nif not DATABSE_URL:\n    print(\"Fail to get DATABASE URL!\")\nengine = create_engine(DATABSE_URL)\nSessionLocal = sessionmaker(bind=engine, autocommit=False, autoflush=False)\nBase = declarative_base()\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db",
        "detail": "src.configs.databse",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "src.configs.databse",
        "description": "src.configs.databse",
        "peekOfCode": "engine = create_engine(DATABSE_URL)\nSessionLocal = sessionmaker(bind=engine, autocommit=False, autoflush=False)\nBase = declarative_base()\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()",
        "detail": "src.configs.databse",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "kind": 5,
        "importPath": "src.configs.databse",
        "description": "src.configs.databse",
        "peekOfCode": "SessionLocal = sessionmaker(bind=engine, autocommit=False, autoflush=False)\nBase = declarative_base()\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()",
        "detail": "src.configs.databse",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 5,
        "importPath": "src.configs.databse",
        "description": "src.configs.databse",
        "peekOfCode": "Base = declarative_base()\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()",
        "detail": "src.configs.databse",
        "documentation": {}
    },
    {
        "label": "db_connect",
        "kind": 2,
        "importPath": "src.configs.db_connect",
        "description": "src.configs.db_connect",
        "peekOfCode": "def db_connect():\n    try:\n        Base.metadata.create_all(bind=engine)\n        print(\"Successfully connect db!\")\n    except Exception as err:\n        print(\"Fail to connect!\")",
        "detail": "src.configs.db_connect",
        "documentation": {}
    },
    {
        "label": "BaseModels",
        "kind": 6,
        "importPath": "src.models.baseModels",
        "description": "src.models.baseModels",
        "peekOfCode": "class BaseModels(Base):\n    __abstract__ = True\n    id = Column(Integer, primary_key=True, unique=True, index=True)\n    uuid = Column(String(36), unique=True, default=lambda: str(uuid.uuid4()))\n    create_at = Column(DateTime, default=datetime.datetime.now())\n    updated_at = Column(DateTime, default=datetime.datetime.now(),\n                        onupdate=datetime.datetime.now())",
        "detail": "src.models.baseModels",
        "documentation": {}
    },
    {
        "label": "Todo",
        "kind": 6,
        "importPath": "src.models.todo",
        "description": "src.models.todo",
        "peekOfCode": "class Todo(BaseModels):\n    __tablename__ = \"Todos\"\n    name = Column(String(256), unique=True, nullable=False)\n    description = Column(String(Text))\n    isDone = Column(Boolean(), default=False)",
        "detail": "src.models.todo",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "src.routes.todoRoutes",
        "description": "src.routes.todoRoutes",
        "peekOfCode": "router = APIRouter()\n@router.get(\"/\", tags=[\"GET TODOS\"])\nasync def get_todo():\n    return {\n        \"fuck\": \"us\"\n    }",
        "detail": "src.routes.todoRoutes",
        "documentation": {}
    },
    {
        "label": "TodoSchema",
        "kind": 6,
        "importPath": "src.schemas.todoSchema",
        "description": "src.schemas.todoSchema",
        "peekOfCode": "class TodoSchema():\n    name: Optional(str) = None\n    description: Optional(str) = None\n    isDone: Optional(str) = None",
        "detail": "src.schemas.todoSchema",
        "documentation": {}
    },
    {
        "label": "loadEnv",
        "kind": 2,
        "importPath": "src.utils.loadEnv",
        "description": "src.utils.loadEnv",
        "peekOfCode": "def loadEnv():\n    load_dotenv(find_dotenv())",
        "detail": "src.utils.loadEnv",
        "documentation": {}
    },
    {
        "label": "root",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def root():\n    return {\n        \"hello\": \"world\"\n    }",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "app = FastAPI()\napp.include_router(router=todoRoutes.router, prefix=\"/api/v1/todos\")\n# health checking\n@app.get(\"/\")\ndef root():\n    return {\n        \"hello\": \"world\"\n    }",
        "detail": "main",
        "documentation": {}
    }
]